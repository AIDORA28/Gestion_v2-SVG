/**
 * üåê GLOBAL FUNCTIONS - PLANIFICAPRO
 * Funciones globales para compatibility con onclick handlers
 * Versi√≥n: 2.0 - Completa y Optimizada
 */

// ===============================
// üéØ NAVIGATION FUNCTIONS
// ===============================

/**
 * Mostrar secci√≥n espec√≠fica del dashboard
 * @param {string} section - Nombre de la secci√≥n a mostrar
 */
window.showSection = function(section) {
    if (window.dashboardHandler && window.dashboardHandler.showSection) {
        window.dashboardHandler.showSection(section);
    } else {
        console.warn(`‚ö†Ô∏è Dashboard handler no disponible para mostrar secci√≥n: ${section}`);
    }
};

/**
 * Mostrar configuraciones de usuario
 */
window.showUserSettings = function() {
    console.log('üîß Mostrando configuraciones de usuario');
    // Implementar modal de configuraciones
    const notyf = window.notyf || new Notyf();
    notyf.open({
        type: 'info',
        message: '‚öôÔ∏è Configuraciones de usuario pr√≥ximamente disponibles'
    });
};

// ===============================
// üìä MODAL FUNCTIONS
// ===============================

/**
 * Cerrar modal de quick add
 */
window.closeQuickAddModal = function() {
    const modal = document.getElementById('quick-add-modal');
    if (modal) {
        modal.classList.add('hidden');
        console.log('‚úñÔ∏è Modal quick add cerrado');
    }
};

/**
 * Cerrar modal de ingreso
 */
window.closeIngresoModal = function() {
    if (window.ingresosHandler && window.ingresosHandler.closeIngresoModal) {
        window.ingresosHandler.closeIngresoModal();
    } else {
        // Fallback directo
        const modal = document.getElementById('ingreso-modal');
        if (modal) {
            modal.classList.add('hidden');
            console.log('‚úñÔ∏è Modal ingreso cerrado (fallback)');
        }
    }
};

/**
 * Cerrar modal de confirmaci√≥n de eliminaci√≥n de ingreso
 */
window.closeDeleteIngresoModal = function() {
    const modal = document.getElementById('delete-ingreso-modal');
    if (modal) {
        modal.classList.add('hidden');
        console.log('‚úñÔ∏è Modal delete ingreso cerrado');
    }
};

/**
 * Abrir modal de ingreso
 */
window.openIngresoModal = function() {
    if (window.ingresosHandler && window.ingresosHandler.openIngresoModal) {
        window.ingresosHandler.openIngresoModal();
    } else {
        const modal = document.getElementById('ingreso-modal');
        if (modal) {
            modal.classList.remove('hidden');
            console.log('‚úÖ Modal ingreso abierto (fallback)');
        }
    }
};

// ===============================
// üéÆ SIDEBAR FUNCTIONS
// ===============================

/**
 * Toggle del men√∫ m√≥vil (alias para compatibilidad)
 */
window.toggleMobileMenu = function() {
    if (window.dashboardCore && window.dashboardCore.toggleSidebar) {
        window.dashboardCore.toggleSidebar();
    } else {
        console.warn('‚ö†Ô∏è Dashboard core no disponible');
    }
};

/**
 * Cerrar sidebar m√≥vil
 */
window.closeSidebar = function() {
    if (window.dashboardCore && window.dashboardCore.closeSidebar) {
        window.dashboardCore.closeSidebar();
    } else {
        console.warn('‚ö†Ô∏è Dashboard core no disponible');
    }
};

// ===============================
// üí∞ QUICK ADD FUNCTIONS
// ===============================

/**
 * Quick add de ingreso
 */
window.quickAddIngreso = function() {
    window.openIngresoModal();
};

/**
 * Quick add de gasto
 */
window.quickAddGasto = function() {
    console.log('üí∏ Quick add gasto');
    const notyf = window.notyf || new Notyf();
    notyf.open({
        type: 'info',
        message: 'üí∏ Funci√≥n de gastos pr√≥ximamente disponible'
    });
};

// ===============================
// üîß UTILITY FUNCTIONS
// ===============================

/**
 * Inicializar todas las funciones globales
 */
window.initGlobalFunctions = function() {
    console.log('üåê Funciones globales inicializadas');
    
    // Verificar dependencias
    const dependencies = [
        { name: 'dashboardCore', obj: window.dashboardCore },
        { name: 'dashboardHandler', obj: window.dashboardHandler },
        { name: 'ingresosHandler', obj: window.ingresosHandler }
    ];
    
    dependencies.forEach(dep => {
        if (dep.obj) {
            console.log(`‚úÖ ${dep.name} disponible`);
        } else {
            console.warn(`‚ö†Ô∏è ${dep.name} no disponible`);
        }
    });
};

/**
 * Manejar errores de funciones globales
 */
window.handleGlobalError = function(functionName, error) {
    console.error(`‚ùå Error en funci√≥n global ${functionName}:`, error);
    
    const notyf = window.notyf || new Notyf();
    notyf.error(`Error en ${functionName}: ${error.message}`);
};

// ===============================
// üöÄ AUTO-INITIALIZATION
// ===============================

// Inicializar cuando el DOM est√© listo
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', window.initGlobalFunctions);
} else {
    window.initGlobalFunctions();
}

// Exportar para debugging
window.globalFunctions = {
    showSection: window.showSection,
    showUserSettings: window.showUserSettings,
    closeQuickAddModal: window.closeQuickAddModal,
    closeIngresoModal: window.closeIngresoModal,
    closeDeleteIngresoModal: window.closeDeleteIngresoModal,
    openIngresoModal: window.openIngresoModal,
    toggleMobileMenu: window.toggleMobileMenu,
    closeSidebar: window.closeSidebar,
    quickAddIngreso: window.quickAddIngreso,
    quickAddGasto: window.quickAddGasto
};

console.log('üåê Global Functions v2.0 cargadas correctamente');
