// Test final del m√≥dulo ingresos - Verificaci√≥n funcional completa
const https = require('https');

console.log('üîç === TEST FUNCIONAL M√ìDULO INGRESOS ===');
console.log('üìÖ Timestamp:', new Date().toLocaleString());
console.log('üéØ Siguiendo patr√≥n dashboard exitoso: Supabase Auth + Database + API Service');
console.log('');

// Configuraci√≥n seg√∫n requerimientos
const SUPABASE_URL = 'https://lobyofpwqwqsszugdwnw.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxvYnlvZnB3cXdxc3N6dWdkd253Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTczMTU4NDIsImV4cCI6MjA3Mjg5MTg0Mn0.QsZ2dIU1iPffRGtHUREQIhQ5--7_w4ANowG0rJ0AtcI';

// Usuario de prueba seg√∫n documentaci√≥n
const TEST_USER = {
    email: 'joegarcia.1395@gmail.com',
    password: '123456',
    id: 'a18ac5b7-d5d3-4ba4-b6be-1c5f8e7d9f2a' // ID simulado para pruebas
};

function makeSupabaseRequest(endpoint, method = 'GET', data = null, token = null) {
    return new Promise((resolve, reject) => {
        const url = `${SUPABASE_URL}/rest/v1${endpoint}`;
        
        const options = {
            method,
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Content-Type': 'application/json',
                'Prefer': 'return=representation'
            }
        };
        
        if (token) {
            options.headers['Authorization'] = `Bearer ${token}`;
        }
        
        const req = https.request(url, options, (res) => {
            let responseData = '';
            res.on('data', chunk => responseData += chunk);
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(responseData);
                    resolve({ 
                        status: res.statusCode, 
                        data: jsonData, 
                        headers: res.headers 
                    });
                } catch (error) {
                    resolve({ 
                        status: res.statusCode, 
                        data: responseData, 
                        headers: res.headers 
                    });
                }
            });
        });
        
        req.on('error', reject);
        
        if (data) {
            req.write(JSON.stringify(data));
        }
        
        req.end();
    });
}

async function testAuthenticatedConnection() {
    console.log('üîê PASO 1: Probando conexi√≥n autenticada...');
    
    try {
        // Simular token de usuario autenticado (en producci√≥n viene de Supabase Auth)
        const mockToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxvYnlvZnB3cXdxc3N6dWdkd253Iiwicm9sZSI6ImF1dGhlbnRpY2F0ZWQiLCJpYXQiOjE3NTczMTU4NDIsImV4cCI6MjA3Mjg5MTg0Mn0.mock';
        
        // Probar lectura de ingresos
        const response = await makeSupabaseRequest(
            `/ingresos?usuario_id=eq.${TEST_USER.id}&select=*&order=fecha.desc,created_at.desc`,
            'GET',
            null,
            mockToken
        );
        
        console.log(`üìä Status: ${response.status}`);
        console.log(`üìã Tipo respuesta: ${Array.isArray(response.data) ? 'Array' : typeof response.data}`);
        
        if (response.status === 200) {
            console.log('‚úÖ Conexi√≥n autenticada: EXITOSA');
            console.log(`üìä Registros disponibles: ${Array.isArray(response.data) ? response.data.length : 0}`);
            
            if (Array.isArray(response.data) && response.data.length > 0) {
                const ejemplo = response.data[0];
                console.log('üìù Ejemplo de registro:');
                console.log(`   - ID: ${ejemplo.id}`);
                console.log(`   - Descripci√≥n: ${ejemplo.descripcion}`);
                console.log(`   - Monto: $${ejemplo.monto}`);
                console.log(`   - Categor√≠a: ${ejemplo.categoria}`);
                console.log(`   - Fecha: ${ejemplo.fecha}`);
            }
        } else {
            console.log(`‚ö†Ô∏è Respuesta inesperada: ${response.status}`);
            console.log(`üìÑ Data: ${JSON.stringify(response.data).substring(0, 200)}...`);
        }
        
        return response.status === 200;
        
    } catch (error) {
        console.log(`‚ùå Error en conexi√≥n: ${error.message}`);
        return false;
    }
}

async function testCRUDOperations() {
    console.log('');
    console.log('üìù PASO 2: Probando operaciones CRUD...');
    
    try {
        // 1. CREATE - Insertar nuevo ingreso
        console.log('üÜï Probando CREATE...');
        
        const nuevoIngreso = {
            descripcion: 'Test Consola Node.js',
            monto: 777.77,
            categoria: 'Freelance',
            fecha: new Date().toISOString().split('T')[0],
            es_recurrente: false,
            usuario_id: TEST_USER.id,
            notas: 'Prueba desde test funcional'
        };
        
        const createResponse = await makeSupabaseRequest(
            '/ingresos',
            'POST',
            nuevoIngreso
        );
        
        console.log(`üìä CREATE Status: ${createResponse.status}`);
        
        if (createResponse.status === 201) {
            console.log('‚úÖ CREATE: EXITOSO');
            console.log(`üÜî ID generado: ${createResponse.data[0]?.id || 'No disponible'}`);
        } else {
            console.log(`‚ùå CREATE fall√≥: ${createResponse.status}`);
            console.log(`üìÑ Error: ${JSON.stringify(createResponse.data)}`);
        }
        
        // 2. READ - Leer ingresos
        console.log('üìñ Probando READ...');
        
        const readResponse = await makeSupabaseRequest(
            `/ingresos?usuario_id=eq.${TEST_USER.id}&limit=5`
        );
        
        console.log(`üìä READ Status: ${readResponse.status}`);
        
        if (readResponse.status === 200 && Array.isArray(readResponse.data)) {
            console.log('‚úÖ READ: EXITOSO');
            console.log(`üìä Registros encontrados: ${readResponse.data.length}`);
        } else {
            console.log(`‚ùå READ fall√≥: ${readResponse.status}`);
        }
        
        return {
            create: createResponse.status === 201,
            read: readResponse.status === 200
        };
        
    } catch (error) {
        console.log(`‚ùå Error en CRUD: ${error.message}`);
        return { create: false, read: false };
    }
}

async function testDataValidation() {
    console.log('');
    console.log('‚úÖ PASO 3: Probando validaciones...');
    
    try {
        // Probar inserci√≥n con datos inv√°lidos
        const datosInvalidos = {
            descripcion: '', // Vac√≠o - deber√≠a fallar
            monto: -100,     // Negativo - deber√≠a fallar
            usuario_id: TEST_USER.id
        };
        
        const response = await makeSupabaseRequest(
            '/ingresos',
            'POST',
            datosInvalidos
        );
        
        console.log(`üìä Validaci√≥n Status: ${response.status}`);
        
        if (response.status >= 400) {
            console.log('‚úÖ Validaciones: FUNCIONANDO (rechaz√≥ datos inv√°lidos)');
            console.log(`üìÑ Error esperado: ${JSON.stringify(response.data).substring(0, 100)}...`);
        } else {
            console.log('‚ö†Ô∏è Validaciones: D√âBILES (acept√≥ datos inv√°lidos)');
        }
        
        return response.status >= 400;
        
    } catch (error) {
        console.log(`‚ùå Error en validaciones: ${error.message}`);
        return false;
    }
}

async function analyzeHandlerImplementation() {
    console.log('');
    console.log('üß† PASO 4: Analizando implementaci√≥n del handler...');
    
    try {
        const fs = require('fs');
        const path = require('path');
        
        const handlerPath = path.join(__dirname, '../public/js/ingresos-module-handler.js');
        const handlerContent = fs.readFileSync(handlerPath, 'utf8');
        
        // Verificar patr√≥n Supabase directo
        const checkPatterns = [
            { name: 'Supabase Auth Integration', pattern: /authToken|Authorization.*Bearer/g },
            { name: 'Direct API Calls', pattern: /fetch.*supabase.*rest\/v1/g },
            { name: 'User ID Filtering', pattern: /usuario_id.*eq\./g },
            { name: 'Error Handling', pattern: /catch.*error/g },
            { name: 'Real-time Updates', pattern: /loadIngresos.*renderIngresos/g }
        ];
        
        const results = {};
        
        checkPatterns.forEach(({ name, pattern }) => {
            const matches = handlerContent.match(pattern);
            results[name] = {
                found: !!matches,
                count: matches ? matches.length : 0
            };
            
            console.log(`${results[name].found ? '‚úÖ' : '‚ùå'} ${name}: ${results[name].found ? `${results[name].count} implementaciones` : 'NO ENCONTRADO'}`);
        });
        
        // Verificar m√©todos cr√≠ticos espec√≠ficos del patr√≥n dashboard
        const criticalMethods = [
            'init', 'handleSubmit', 'submitIngreso', 
            'loadIngresos', 'renderIngresos', 'updateStats'
        ];
        
        console.log('üîß M√©todos cr√≠ticos:');
        criticalMethods.forEach(method => {
            const found = handlerContent.includes(`${method}(`);
            console.log(`${found ? '‚úÖ' : '‚ùå'} ${method}: ${found ? 'IMPLEMENTADO' : 'FALTANTE'}`);
        });
        
        return results;
        
    } catch (error) {
        console.log(`‚ùå Error analizando handler: ${error.message}`);
        return null;
    }
}

async function generateOptimizationReport() {
    console.log('');
    console.log('üìä === EJECUTANDO TEST FUNCIONAL COMPLETO ===');
    console.log('');
    
    const results = {
        auth: await testAuthenticatedConnection(),
        crud: await testCRUDOperations(),
        validation: await testDataValidation(),
        handler: await analyzeHandlerImplementation()
    };
    
    console.log('');
    console.log('üìã === REPORTE DE OPTIMIZACI√ìN ===');
    console.log('');
    
    // Calcular estado general
    let score = 0;
    let maxScore = 0;
    
    // Autenticaci√≥n (25%)
    if (results.auth) score += 25;
    maxScore += 25;
    console.log(`üîê Autenticaci√≥n: ${results.auth ? '‚úÖ FUNCIONANDO' : '‚ùå REQUIERE AJUSTE'} (${results.auth ? 25 : 0}/25pts)`);
    
    // CRUD (35%)
    const crudScore = (results.crud?.create ? 15 : 0) + (results.crud?.read ? 20 : 0);
    score += crudScore;
    maxScore += 35;
    console.log(`üìù Operaciones CRUD: ${crudScore > 20 ? '‚úÖ FUNCIONANDO' : '‚ö†Ô∏è PARCIAL'} (${crudScore}/35pts)`);
    
    // Validaciones (20%)
    if (results.validation) score += 20;
    maxScore += 20;
    console.log(`‚úÖ Validaciones: ${results.validation ? '‚úÖ FUNCIONANDO' : '‚ö†Ô∏è MEJORABLE'} (${results.validation ? 20 : 0}/20pts)`);
    
    // Handler (20%)
    if (results.handler) score += 20;
    maxScore += 20;
    console.log(`üß† Handler: ${results.handler ? '‚úÖ IMPLEMENTADO' : '‚ùå REQUIERE TRABAJO'} (${results.handler ? 20 : 0}/20pts)`);
    
    const percentage = Math.round((score / maxScore) * 100);
    
    console.log('');
    console.log(`üéØ PUNTUACI√ìN FINAL: ${score}/${maxScore} (${percentage}%)`);
    
    // Recomendaciones seg√∫n patr√≥n dashboard exitoso
    console.log('');
    console.log('üí° OPTIMIZACIONES REQUERIDAS:');
    
    if (!results.auth) {
        console.log('üîß 1. Implementar autenticaci√≥n autom√°tica tipo dashboard');
        console.log('   - Auto-redirect si no hay token');
        console.log('   - Usar token real de usuario (no anon key)');
    }
    
    if (!results.crud?.create) {
        console.log('üîß 2. Optimizar operaciones de inserci√≥n');
        console.log('   - Verificar headers Authorization');
        console.log('   - Implementar manejo de errores robusto');
    }
    
    if (!results.crud?.read) {
        console.log('üîß 3. Mejorar carga de datos');
        console.log('   - Filtrado por usuario_id autom√°tico');
        console.log('   - Ordenamiento por fecha descendente');
    }
    
    console.log('üîß 4. Seguir patr√≥n dashboard exacto:');
    console.log('   ‚úÖ Supabase Auth - Token real del usuario');
    console.log('   ‚úÖ Supabase Database - APIs REST directas');
    console.log('   ‚úÖ API Service JavaScript - CRUD client-side');
    
    console.log('');
    console.log('üéØ PR√ìXIMO PASO: Aplicar optimizaciones identificadas');
    
    return { score, percentage, results };
}

// Ejecutar test completo
generateOptimizationReport().then((report) => {
    console.log('');
    console.log('‚úÖ Test funcional completado');
    
    if (report.percentage >= 80) {
        console.log('üéâ M√≥dulo listo para optimizaci√≥n final');
    } else {
        console.log('üîß M√≥dulo requiere actualizaciones importantes');
    }
    
}).catch(error => {
    console.error('‚ùå Error en test:', error);
    process.exit(1);
});
