const puppeteer = require('puppeteer');

async function testIngresosSystem() {
    console.log('üß™ === INICIANDO PRUEBAS AUTOMATIZADAS DEL SISTEMA DE INGRESOS ===');
    console.log('üìÖ Timestamp:', new Date().toLocaleString());
    console.log('');

    let browser;
    let page;

    try {
        // Inicializar Puppeteer
        console.log('üöÄ Iniciando navegador...');
        browser = await puppeteer.launch({ 
            headless: false,
            defaultViewport: { width: 1200, height: 800 },
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        page = await browser.newPage();
        
        // Interceptar console.log del navegador
        page.on('console', msg => {
            const text = msg.text();
            if (text.includes('üîç') || text.includes('‚úÖ') || text.includes('‚ùå') || 
                text.includes('üìù') || text.includes('üîê') || text.includes('üìä')) {
                console.log(`[BROWSER] ${text}`);
            }
        });
        
        // Navegar al debug console
        console.log('üåê Navegando al debug console...');
        await page.goto('http://localhost:8080/Pruebas/debug-console.html');
        
        // Esperar a que cargue completamente
        await page.waitForSelector('#debug-output', { timeout: 10000 });
        console.log('‚úÖ Debug console cargado');
        
        // Paso 1: Verificar autenticaci√≥n
        console.log('');
        console.log('üîç PASO 1: Verificando autenticaci√≥n...');
        await page.click('button[onclick="checkAuth()"]');
        await page.waitForTimeout(2000);
        
        // Paso 2: Test conexi√≥n Supabase
        console.log('');
        console.log('üîç PASO 2: Probando conexi√≥n Supabase...');
        await page.click('button[onclick="testSupabaseConnection()"]');
        await page.waitForTimeout(2000);
        
        // Paso 3: Inicializar sistema
        console.log('');
        console.log('üîç PASO 3: Inicializando sistema...');
        await page.click('button[onclick="initializeSystem()"]');
        await page.waitForTimeout(3000);
        
        // Paso 4: Ejecutar diagn√≥stico completo
        console.log('');
        console.log('üîç PASO 4: Ejecutando diagn√≥stico completo...');
        await page.click('button[onclick="runDiagnostic()"]');
        await page.waitForTimeout(3000);
        
        // Paso 5: Ejecutar prueba completa
        console.log('');
        console.log('üîç PASO 5: Ejecutando prueba completa...');
        await page.click('button[onclick="runDebugTest()"]');
        await page.waitForTimeout(5000);
        
        // Capturar el estado de los componentes
        console.log('');
        console.log('üìä === CAPTURANDO ESTADO DEL SISTEMA ===');
        
        const statusAuth = await page.$eval('#status-auth', el => el.textContent);
        const statusSupabase = await page.$eval('#status-supabase', el => el.textContent);
        const statusTemplate = await page.$eval('#status-template', el => el.textContent);
        const statusHandler = await page.$eval('#status-handler', el => el.textContent);
        
        console.log('üîê Autenticaci√≥n:', statusAuth);
        console.log('üåê Supabase:', statusSupabase);
        console.log('üìÑ Template:', statusTemplate);
        console.log('üß† Handler:', statusHandler);
        
        // Capturar output del debug console
        console.log('');
        console.log('üíª === OUTPUT DEL DEBUG CONSOLE ===');
        const debugOutput = await page.$eval('#debug-output', el => el.textContent);
        console.log(debugOutput);
        
        // Paso 6: Probar env√≠o manual
        console.log('');
        console.log('üîç PASO 6: Probando env√≠o manual...');
        await page.click('button[onclick="testFormSubmit()"]');
        await page.waitForTimeout(3000);
        
        // Evaluar funciones directamente en el navegador
        console.log('');
        console.log('üîç PASO 7: Evaluando funciones directas...');
        
        const result = await page.evaluate(async () => {
            try {
                // Verificar si las funciones est√°n disponibles
                const hasDebugIngresos = typeof window.debugIngresos === 'function';
                const hasDiagnosticIngresos = typeof window.diagnosticIngresos === 'function';
                const hasHandler = !!window.ingresosModuleHandler;
                
                console.log('üîç debugIngresos disponible:', hasDebugIngresos);
                console.log('üîç diagnosticIngresos disponible:', hasDiagnosticIngresos);
                console.log('üîç Handler disponible:', hasHandler);
                
                let debugResult = null;
                let diagnosticResult = null;
                
                // Ejecutar diagn√≥stico si est√° disponible
                if (hasDiagnosticIngresos) {
                    try {
                        diagnosticResult = await window.diagnosticIngresos();
                        console.log('‚úÖ Diagn√≥stico ejecutado:', diagnosticResult);
                    } catch (error) {
                        console.log('‚ùå Error en diagn√≥stico:', error.message);
                    }
                } else if (hasHandler && window.ingresosModuleHandler.diagnosticCheck) {
                    try {
                        diagnosticResult = await window.ingresosModuleHandler.diagnosticCheck();
                        console.log('‚úÖ Diagn√≥stico (handler) ejecutado:', diagnosticResult);
                    } catch (error) {
                        console.log('‚ùå Error en diagn√≥stico (handler):', error.message);
                    }
                }
                
                // Ejecutar debug si est√° disponible
                if (hasDebugIngresos) {
                    try {
                        debugResult = await window.debugIngresos();
                        console.log('‚úÖ Debug ejecutado:', debugResult);
                    } catch (error) {
                        console.log('‚ùå Error en debug:', error.message);
                    }
                } else if (hasHandler && window.ingresosModuleHandler.debugTest) {
                    try {
                        debugResult = await window.ingresosModuleHandler.debugTest();
                        console.log('‚úÖ Debug (handler) ejecutado:', debugResult);
                    } catch (error) {
                        console.log('‚ùå Error en debug (handler):', error.message);
                    }
                }
                
                return {
                    hasDebugIngresos,
                    hasDiagnosticIngresos,
                    hasHandler,
                    debugResult,
                    diagnosticResult
                };
                
            } catch (error) {
                console.log('‚ùå Error en evaluaci√≥n:', error.message);
                return { error: error.message };
            }
        });
        
        console.log('üìã Resultado de la evaluaci√≥n:', result);
        
        // Tomar screenshot
        console.log('');
        console.log('üì∏ Tomando screenshot...');
        await page.screenshot({ path: 'debug-console-result.png', fullPage: true });
        
        console.log('');
        console.log('üéâ === PRUEBAS COMPLETADAS ===');
        console.log('üìä Resumen:');
        console.log('  - Navegador iniciado: ‚úÖ');
        console.log('  - Debug console cargado: ‚úÖ');
        console.log('  - Pruebas ejecutadas: ‚úÖ');
        console.log('  - Screenshot guardado: ‚úÖ');
        
    } catch (error) {
        console.error('‚ùå Error en las pruebas:', error);
        
        if (page) {
            // Tomar screenshot del error
            try {
                await page.screenshot({ path: 'debug-console-error.png', fullPage: true });
                console.log('üì∏ Screenshot de error guardado');
            } catch (screenshotError) {
                console.error('‚ùå Error tomando screenshot:', screenshotError);
            }
        }
        
    } finally {
        if (browser) {
            console.log('üîí Cerrando navegador...');
            await browser.close();
        }
    }
}

// Ejecutar las pruebas
testIngresosSystem().then(() => {
    console.log('‚úÖ Script de pruebas finalizado');
    process.exit(0);
}).catch(error => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
});
